from tensorflowDivision import testing
from PIL import Image, ImageTk, ImageDraw
import cv2
import tkinter as tk
import numpy as np
import tensorflow as tf


from keras.models import load_model

model=tf.keras.models.load_model('mnist_cnn.h5')

classes=[0,1,2,3,4,5,6,7,8,9]



#image = Image.new("1", (200, 200), (255))      # "1" : 1bit pixel - balck and white
image = Image.new("L", (200, 200), (255))       # "L" : 8bit pixel - black and white (gray)
image_width, image_height = image.size
draw = ImageDraw.Draw(image)

window = tk.Tk()
window.geometry("%sx%s" % (image_width, image_height))
window.update()
canvas = tk.Canvas(window)
canvas.pack(expand = 1, fill = tk.BOTH)

tk_image = ImageTk.PhotoImage(image)
canvas.create_image(image_width / 2, image_height / 2, image = tk_image, tags = "image1")

def Resize(event):
    canvas.delete("image1")
    canvas.create_image(canvas.winfo_width() / 2, canvas.winfo_height() / 2, image=tk_image, tags="image1")

canvas.bind("<Configure>", Resize)

def SetStartPosition(event):
    global x, y
    x = event.x
    y = event.y


def model(self):
    filename = "image1.png"
    image.save(filename)
    pred=testing()
    #percent = np.argmax(predict[0])
    print('예측 값 :',np.argmax(pred[0]),'\n', 'accuracy : ',pred[0][np.argmax(pred[0])]*100,'%','\n')

def DrawLine(event):
    global tk_image, x, y
    canvas.delete("image1")
    draw.line([(x, y), (event.x, event.y)], fill = None, width = 10)
    x = event.x
    y = event.y
    tk_image = ImageTk.PhotoImage(image)
    canvas.create_image(canvas.winfo_width() / 2, canvas.winfo_height() / 2, image = tk_image, tags = "image1")

def clear():
    canvas.delete('all')
    draw.rectangle((0,0,200,200),(255))

'''     
def GetPixelInfo(event):
    data = []
    image2 = image.resize((28, 28))
    for i in range(28):
        data.append([])
        for j in range(28):
            color = image2.getpixel((i, j))
            data[i].append(color)
    print(data)
    return np.array(data)
'''
button = tk.Button(canvas,text="reset", command = clear);
button.pack()

canvas.bind("<Button-1>", SetStartPosition)
canvas.bind("<B1-Motion>", DrawLine)
canvas.bind("<Button-3>", model)
window.mainloop()

# [프로그램 8.4]에서 마지막에 다음 코드를 추가하여 테스트 (예시) : GetPixelInfo 함수의 반환값을 x_new에 대입하여 테스트
'''
x_new = np.array([[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 250, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 212, 186, 249, 255, 255, 255, 255, 255, 255, 255, 229, 139, 246, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 254, 255, 255, 255, 87, 0, 208, 255, 255, 255, 255, 255, 255, 255, 175, 1, 218, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 236, 105, 198, 255, 246, 35, 0, 207, 255, 255, 255, 255, 255, 255, 255, 175, 1, 218, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 189, 0, 151, 255, 238, 29, 0, 207, 255, 255, 255, 255, 255, 255, 255, 175, 1, 218, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 138, 9, 203, 255, 213, 8, 0, 207, 255, 255, 255, 255, 255, 255, 255, 175, 1, 218, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 73, 76, 255, 255, 187, 0, 1, 206, 255, 255, 255, 255, 255, 255, 255, 165, 7, 227, 255, 255, 255, 255], [255, 255, 255, 255, 255, 249, 31, 135, 255, 255, 163, 0, 0, 169, 255, 255, 255, 255, 255, 255, 255, 84, 66, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 233, 13, 172, 255, 255, 145, 18, 32, 98, 255, 255, 255, 255, 255, 255, 216, 13, 159, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 209, 5, 201, 255, 255, 85, 65, 142, 31, 235, 255, 255, 255, 255, 234, 54, 43, 237, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 185, 0, 212, 255, 244, 27, 126, 228, 18, 68, 137, 133, 133, 135, 51, 9, 183, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 172, 11, 231, 255, 211, 4, 191, 255, 202, 63, 17, 19, 18, 24, 86, 213, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 150, 10, 235, 255, 159, 12, 231, 255, 255, 251, 243, 243, 243, 245, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 150, 10, 235, 255, 74, 60, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 166, 7, 203, 195, 13, 174, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 242, 76, 5, 12, 80, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 243, 161, 131, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]])
x_new = x_new / 255.0
x_new = x_new.reshape((-1, 28, 28, 1))  # [프로그램 7.7]의 경우 x_new.reshape((-1, 28, 28))
y_new = model.predict(x_new)
print(y_new)
'''